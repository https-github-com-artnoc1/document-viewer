apply plugin: 'com.android.application'

dependencies {
    implementation 'jcifs:jcifs:1.3.17'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'

    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'commons-io:commons-io:2.5'
}

import java.util.regex.Pattern
def getVerCode() {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def version = Integer.parseInt(matcher.group(1))
    return version
}

task buildFontsTask(type: Exec) {
        workingDir "$projectDir/jni/mupdf/mupdf/"
        commandLine 'make', 'generate'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'externalNativeBuildDebug' ||
        task.name == 'externalNativeBuildRelease') {
        task.dependsOn 'buildFontsTask'
    }
}

task cleanFontsTask(type: Exec) {
    workingDir "$projectDir/jni/mupdf/mupdf/"
    commandLine 'make', 'nuke'
}

clean.dependsOn cleanFontsTask

// map for the version code
ext.versionCodes = ['armeabi': 1, 'armeabi-v7a':2, 'x86':3, 'mips':4, 'arm64-v8a':5, 'x86_64':6, 'mips64':7]
// ext.versionCodes = ['armeabi-v7a':2, 'x86':3, 'arm64-v8a':5, 'x86_64':6]

import com.android.build.OutputFile

android {
    compileSdkVersion 28
    // copied from: https://github.com/kontalk/androidclient
    // temporarly introduced to fix Cyanogenmod bug
    // https://issuetracker.google.com/issues/64434571#comment35

    useLibrary 'org.apache.http.legacy'

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        externalNativeBuild {
            ndkBuild {
                arguments "-j8"
            }
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk false
        }
    }

    applicationVariants.all { variant ->
      variant.outputs.each { output ->
        output.versionCodeOverride =
          project.ext.versionCodes.get(output.getFilter(OutputFile.ABI)) + getVerCode()
      }
    }

    /*
     * To sign release build, create file gradle.properties in ~/.gradle/ with this content:
     *
     * signingStoreLocation=/home/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found sign properties in gradle.properties! Signing buildâ€¦"

        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        absolutePaths false
        lintConfig file('src/main/lint.xml')
    }

    packagingOptions {
        exclude 'document-viewer/jni/djvu/djvulibre'
        exclude 'document-viewer/jni/mupdf/mupdf'
        exclude 'document-viewer/obj/local/armeabi-v7a/libmupdf_java.so'
        exclude 'document-viewer/obj/local/x86_64/libmupdf_java.so'
        exclude 'document-viewer/obj/local/x86/libmupdf_java.so'
        exclude 'document-viewer/obj/local/arm64-v8a/libmupdf_java.so'
    }
}
